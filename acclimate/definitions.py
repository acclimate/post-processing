# TODO important definitions such as standard region sets
import numpy as np
from matplotlib.colors import LinearSegmentedColormap

WORLD_REGIONS = {
    "AFR": [
        "DZA",
        "AGO",
        "CPV",
        "TZA",
        "BWA",
        "DJI",
        "GIN",
        "SYC",
        "MAR",
        "ZAF",
        "BEN",
        "CMR",
        "LSO",
        "TCD",
        "MOZ",
        # "GNQ",
        "COG",
        "ETH",
        "MDG",
        "RWA",
        "ZMB",
        "CAF",
        "SOM",
        "ERI",
        "GAB",
        "STP",
        "EGY",
        "NAM",
        "GHA",
        "LBR",
        "LBY",
        "BFA",
        "MRT",
        "NGA",
        "MWI",
        "UGA",
        "BDI",
        "MUS",
        "NER",
        "SEN",
        "GMB",
        "ZWE",
        "KEN",
        "TUN",
        "SWZ",
        "CIV",
        "TGO",
        "MLI",
        "SLE",
        "COD",
        "SDN",
        # "SDS",
    ],
    "ASI": [
        "BGD",
        "QAT",
        "PAK",
        "VNM",
        "THA",
        "NPL",
        "YEM",
        "PHL",
        "SYR",
        "MAC",
        "GEO",
        "TJK",
        "PSE",
        "IND",
        "MDV",
        "MMR",
        "RUS",
        "KOR",
        "IRQ",
        "IRN",
        "ARE",
        "BHR",
        "ARM",
        "PNG",
        "JOR",
        "MYS",
        "PRK",
        "KHM",
        "HKG",
        "SAU",
        "LBN",
        "KAZ",
        "LKA",
        "TKM",
        "MNG",
        "AFG",
        "BTN",
        "ISR",
        "IDN",
        "LAO",
        "TUR",
        "OMN",
        "BRN",
        "TWN",
        "AZE",
        "SGP",
        "UZB",
        "KWT",
        "JPN",
        "KGZ",
    ],
    "EUR": [
        "BGR",
        "FIN",
        "ROU",
        "BEL",
        "GBR",
        "HUN",
        "BLR",
        "GRC",
        "AND",
        "ANT",
        "NOR",
        "SMR",
        # "MDA",
        "SRB",
        "LTU",
        "SWE",
        "AUT",
        "ALB",
        "MKD",
        "UKR",
        "CHE",
        "LIE",
        "PRT",
        "SVN",
        "SVK",
        "HRV",
        "DEU",
        "NLD",
        "MNE",
        "LVA",
        "IRL",
        "CZE",
        "LUX",
        "ISL",
        "FRA",
        "DNK",
        "ITA",
        "CYP",
        "BIH",
        "POL",
        "EST",
        "ESP",
        "MLT",
        "MCO",
    ],
    "LAM": [
        "NIC",
        "GUY",
        "CRI",
        "TTO",
        "PAN",
        "BLZ",
        "VGB",
        "HND",
        "DOM",
        "PER",
        "COL",
        "VEN",
        "MEX",
        "ABW",
        "ARG",
        "BHS",
        "BOL",
        "PRY",
        "CHL",
        "JAM",
        "URY",
        "HTI",
        "ATG",
        "SUR",
        "ECU",
        "GTM",
        "CUB",
        "BRB",
        "BRA",
        "CYM",
        "SLV",
    ],
    "NAM": ["GRL", "CAN", "BMU", "USA"],
    "OCE": ["FJI", "VUT", "AUS", "WSM", "NZL", "NCL", "PYF"],
    "ADB": [
        "BGD",
        "PAK",
        "VNM",
        "THA",
        "NPL",
        "PHL",
        "GEO",
        "TJK",
        "IND",
        "MDV",
        "MMR",
        "KOR",
        "ARE",
        "ARM",
        "PNG",
        "MYS",
        "HKG",
        "CHN",
        "KAZ",
        "TKM",
        "MNG",
        "AFG",
        "BTN",
        "IDN",
        "LAO",
        "TUR",
        "TWN",
        "AZE",
        "UZB",
        "JPN",
        "KGZ",
    ],
    "EU28": [
        "BGR",
        "FIN",
        "ROU",
        "BEL",
        "GBR",
        "HUN",
        "GRC",
        "LTU",
        "SWE",
        "AUT",
        "PRT",
        "SVN",
        "SVK",
        "HRV",
        "DEU",
        "NLD",
        "LVA",
        "IRL",
        "CZE",
        "LUX",
        "FRA",
        "DNK",
        "ITA",
        "CYP",
        "POL",
        "EST",
        "ESP",
        "MLT",
    ],
    "OECD": [
        "AUS",
        "AUT",
        "BEL",
        "CAN",
        "CHE",
        "CHL",
        "CZE",
        "DEU",
        "DNK",
        "ESP",
        "EST",
        "FIN",
        "FRA",
        "GBR",
        "GRC",
        "HUN",
        "IRL",
        "ISL",
        "ISR",
        "ITA",
        "JPN",
        "KOR",
        "LUX",
        "LVA",
        "MEX",
        "NLD",
        "NOR",
        "NZL",
        "POL",
        "PRT",
        "SVK",
        "SVN",
        "SWE",
        "TUR",
        "USA",
    ],
    "BRICS": ["BRA", "CHN", "IND", "RUS", "ZAF"],
    "CHN": [
        "CN.AH",
        "CN.BJ",
        "CN.CQ",
        "CN.FJ",
        "CN.GS",
        "CN.GD",
        "CN.GX",
        "CN.GZ",
        "CN.HA",
        "CN.HB",
        "CN.HL",
        "CN.HE",
        "CN.HU",
        "CN.HN",
        "CN.JS",
        "CN.JX",
        "CN.JL",
        "CN.LN",
        "CN.NM",
        "CN.NX",
        "CN.QH",
        "CN.SA",
        "CN.SD",
        "CN.SH",
        "CN.SX",
        "CN.SC",
        "CN.TJ",
        "CN.XJ",
        "CN.XZ",
        "CN.YN",
        "CN.ZJ",
    ],
    "USA": [
        "US.AL",
        "US.AK",
        "US.AZ",
        "US.AR",
        "US.CA",
        "US.CO",
        "US.CT",
        "US.DE",
        "US.DC",
        "US.FL",
        "US.GA",
        "US.HI",
        "US.ID",
        "US.IL",
        "US.IN",
        "US.IA",
        "US.KS",
        "US.KY",
        "US.LA",
        "US.ME",
        "US.MD",
        "US.MA",
        "US.MI",
        "US.MN",
        "US.MS",
        "US.MO",
        "US.MT",
        "US.NE",
        "US.NV",
        "US.NH",
        "US.NJ",
        "US.NM",
        "US.NY",
        "US.NC",
        "US.ND",
        "US.OH",
        "US.OK",
        "US.OR",
        "US.PA",
        "US.RI",
        "US.SC",
        "US.SD",
        "US.TN",
        "US.TX",
        "US.UT",
        "US.VT",
        "US.VA",
        "US.WA",
        "US.WV",
        "US.WI",
        "US.WY",
    ],
}

# consumption baskets for consumer analysis
necessary = ["AGRI", "FOOD", "ELWA", "FISH", "EDHE"]
relevant = ["OILC", "TRAN", "WOOD", "COMM", "RETT", "TEXL", "METL", "MACH", "TREQ", "MANU", "CONS", "WHOT"]
other = ["GAST", "MINQ", "REXI", "RECY", "OTHE", "FINC", "HOUS", "ADMI", "REPA"]
consumption_baskets = {"necessary": necessary, "relevant": relevant, "other": other}

# sector names
# define maps to map numerical dimensions back to keys
consumer_names = ["1st", "2nd", "3rd", "4th", "5th"]
consumer_indizes = range(0, 5)

sector_names = ['AGRI',
                'FISH',
                'MINQ',
                'FOOD',
                'TEXL',
                'WOOD',
                'OILC',
                'METL',
                'MACH',
                'TREQ',
                'MANU',
                'RECY',
                'ELWA',
                'CONS',
                'REPA',
                'WHOT',
                'RETT',
                'GAST',
                'TRAN',
                'COMM',
                'FINC',
                'ADMI',
                'EDHE',
                'HOUS',
                'OTHE',
                'REXI']
sector_indizes = range(0, 26)

consumer_index_name_dict = dict(zip(consumer_indizes, consumer_names))
consumer_name_index_dict = dict(zip(consumer_names, consumer_indizes))


def consumer_map(consumer_index):
    return consumer_index_name_dict[consumer_index]


producing_sectors_index_name_dict = dict(zip(sector_indizes, sector_names))
producing_sectors_name_index_dict = dict(zip(sector_names, sector_indizes))


def producing_sector_map(sector_index):
    return producing_sectors_index_name_dict[sector_index]


# colors as in previous publications

def pik_color(tone, id=0):
    return {
        "orange": ["#fab792", "#f89667", "#f57744", "#f35a28", "#de5224", "#c94a20", "#b4421c"],
        "gray": ["#bec1c3", "#a0a4a7", "#83888b", "#686c70", "#55585b", "#434346", "#302f32"],
        "blue": ["#99dff9", "#66cef6", "#33bef3", "#00adef", "#008dc7", "#006e9e", "#004e75"],
        "green": ["#cce3b7", "#b3d698", "#9aca7c", "#81be63", "#6a9c51", "#537a3f", "#3d582d"]
    }[tone][3 - id]


pik_cols = {'blue': pik_color('blue', 0),
            'orange': pik_color('orange', 0),
            'green': pik_color('green', -1),
            'gray': pik_color('gray', -1)}

pik_colors = map(lambda i: pik_color(
    ['blue', 'green', 'orange', 'gray'][int(i % 4)], [0, 3, -3, 1, -1, 2, -2][int(i / 4)]), range(20))


def pik_color_list(n_of_elements, col_list=[pik_color('green'), pik_color('blue'), pik_color('orange')]):
    c_map = LinearSegmentedColormap.from_list('my_colors', col_list, N=n_of_elements)
    return [(c_map(1. * i / (n_of_elements - 1))) for i in np.arange(0, n_of_elements)]
